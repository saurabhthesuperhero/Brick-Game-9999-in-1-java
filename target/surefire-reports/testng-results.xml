<?xml version="1.0" encoding="UTF-8"?>
<testng-results total="240" passed="240" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-03-21T06:09:28Z" name="Command line suite" finished-at="2024-03-21T06:09:31Z" duration-ms="2946">
    <groups>
    </groups>
    <test started-at="2024-03-21T06:09:28Z" name="Command line test" finished-at="2024-03-21T06:09:31Z" duration-ms="2946">
      <class name="com.github.vitalibo.brickgame.core.ControllerTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@86be70a]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:30Z" duration-ms="911" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testChangePause()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@86be70a]" started-at="2024-03-21T11:39:30Z" name="testChangePause" finished-at="2024-03-21T11:39:30Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testChangePause -->
        <test-method signature="testChangeSound()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@86be70a]" started-at="2024-03-21T11:39:30Z" name="testChangeSound" finished-at="2024-03-21T11:39:30Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testChangeSound -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@86be70a]" started-at="2024-03-21T11:39:30Z" name="setUp" finished-at="2024-03-21T11:39:30Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDelegateKeyPressed(int, java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@86be70a]" started-at="2024-03-21T11:39:30Z" name="testDelegateKeyPressed" data-provider="actions" finished-at="2024-03-21T11:39:30Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[38]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda$242/0x000000084025cc40@25c548d1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDelegateKeyPressed -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@86be70a]" started-at="2024-03-21T11:39:30Z" name="setUp" finished-at="2024-03-21T11:39:30Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@86be70a]" started-at="2024-03-21T11:39:30Z" name="setUp" finished-at="2024-03-21T11:39:30Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDelegateKeyPressed(int, java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@86be70a]" started-at="2024-03-21T11:39:30Z" name="testDelegateKeyPressed" data-provider="actions" finished-at="2024-03-21T11:39:30Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[40]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda$243/0x0000000840318040@476a2819]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDelegateKeyPressed -->
        <test-method signature="testDelegateKeyPressed(int, java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@86be70a]" started-at="2024-03-21T11:39:30Z" name="testDelegateKeyPressed" data-provider="actions" finished-at="2024-03-21T11:39:30Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[37]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda$244/0x0000000840318440@279ab15e]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDelegateKeyPressed -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@86be70a]" started-at="2024-03-21T11:39:30Z" name="setUp" finished-at="2024-03-21T11:39:30Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@86be70a]" started-at="2024-03-21T11:39:30Z" name="setUp" finished-at="2024-03-21T11:39:30Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDelegateKeyPressed(int, java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@86be70a]" started-at="2024-03-21T11:39:30Z" name="testDelegateKeyPressed" data-provider="actions" finished-at="2024-03-21T11:39:30Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[39]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda$245/0x0000000840318840@571c2ed8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDelegateKeyPressed -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@86be70a]" started-at="2024-03-21T11:39:30Z" name="setUp" finished-at="2024-03-21T11:39:30Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDelegateKeyPressed(int, java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@86be70a]" started-at="2024-03-21T11:39:30Z" name="testDelegateKeyPressed" data-provider="actions" finished-at="2024-03-21T11:39:30Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[32]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda$246/0x0000000840318c40@5810772a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDelegateKeyPressed -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@86be70a]" started-at="2024-03-21T11:39:30Z" name="setUp" finished-at="2024-03-21T11:39:30Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNotDelegateKeyPressed(int, java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@86be70a]" started-at="2024-03-21T11:39:30Z" name="testNotDelegateKeyPressed" data-provider="actions" finished-at="2024-03-21T11:39:30Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[38]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda$242/0x000000084025cc40@25c548d1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotDelegateKeyPressed -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@86be70a]" started-at="2024-03-21T11:39:30Z" name="setUp" finished-at="2024-03-21T11:39:30Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNotDelegateKeyPressed(int, java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@86be70a]" started-at="2024-03-21T11:39:30Z" name="testNotDelegateKeyPressed" data-provider="actions" finished-at="2024-03-21T11:39:30Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[40]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda$243/0x0000000840318040@476a2819]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotDelegateKeyPressed -->
        <test-method signature="testNotDelegateKeyPressed(int, java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@86be70a]" started-at="2024-03-21T11:39:30Z" name="testNotDelegateKeyPressed" data-provider="actions" finished-at="2024-03-21T11:39:30Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[37]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda$244/0x0000000840318440@279ab15e]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotDelegateKeyPressed -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@86be70a]" started-at="2024-03-21T11:39:30Z" name="setUp" finished-at="2024-03-21T11:39:30Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@86be70a]" started-at="2024-03-21T11:39:30Z" name="setUp" finished-at="2024-03-21T11:39:30Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@86be70a]" started-at="2024-03-21T11:39:30Z" name="setUp" finished-at="2024-03-21T11:39:30Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNotDelegateKeyPressed(int, java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@86be70a]" started-at="2024-03-21T11:39:30Z" name="testNotDelegateKeyPressed" data-provider="actions" finished-at="2024-03-21T11:39:30Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[39]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda$245/0x0000000840318840@571c2ed8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotDelegateKeyPressed -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@86be70a]" started-at="2024-03-21T11:39:30Z" name="setUp" finished-at="2024-03-21T11:39:30Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNotDelegateKeyPressed(int, java.util.function.Consumer)[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@86be70a]" started-at="2024-03-21T11:39:30Z" name="testNotDelegateKeyPressed" data-provider="actions" finished-at="2024-03-21T11:39:30Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[32]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.core.ControllerTest$$Lambda$246/0x0000000840318c40@5810772a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotDelegateKeyPressed -->
        <test-method signature="testReset()[pri:0, instance:com.github.vitalibo.brickgame.core.ControllerTest@86be70a]" started-at="2024-03-21T11:39:30Z" name="testReset" finished-at="2024-03-21T11:39:30Z" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReset -->
      </class> <!-- com.github.vitalibo.brickgame.core.ControllerTest -->
      <class name="com.github.vitalibo.brickgame.core.KernelTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.KernelTest@5bb21b69]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testJob()[pri:0, instance:com.github.vitalibo.brickgame.core.KernelTest@5bb21b69]" started-at="2024-03-21T11:39:31Z" name="testJob" finished-at="2024-03-21T11:39:31Z" duration-ms="102" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJob -->
      </class> <!-- com.github.vitalibo.brickgame.core.KernelTest -->
      <class name="com.github.vitalibo.brickgame.core.ui.BrickTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickTest@29b5cd00]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="758" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNotRepaint()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickTest@29b5cd00]" started-at="2024-03-21T11:39:29Z" name="testNotRepaint" finished-at="2024-03-21T11:39:29Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotRepaint -->
        <test-method signature="testPaintState(boolean, java.awt.Color)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickTest@29b5cd00]" started-at="2024-03-21T11:39:29Z" name="testPaintState" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="56" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[java.awt.Color[r=97,g=112,b=91]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintState -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickTest@29b5cd00]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPaintState(boolean, java.awt.Color)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickTest@29b5cd00]" started-at="2024-03-21T11:39:29Z" name="testPaintState" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[java.awt.Color[r=0,g=0,b=0]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintState -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickTest@29b5cd00]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickTest@29b5cd00]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testRepaint()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickTest@29b5cd00]" started-at="2024-03-21T11:39:29Z" name="testRepaint" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
      </class> <!-- com.github.vitalibo.brickgame.core.ui.BrickTest -->
      <class name="com.github.vitalibo.brickgame.core.CountdownJobTest">
        <test-method signature="testCountdown()[pri:0, instance:com.github.vitalibo.brickgame.core.CountdownJobTest@26a7b76d]" started-at="2024-03-21T11:39:30Z" name="testCountdown" finished-at="2024-03-21T11:39:31Z" duration-ms="100" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCountdown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.CountdownJobTest@26a7b76d]" started-at="2024-03-21T11:39:30Z" name="setUp" finished-at="2024-03-21T11:39:30Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
      </class> <!-- com.github.vitalibo.brickgame.core.CountdownJobTest -->
      <class name="com.github.vitalibo.brickgame.game.snake.MouseTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testEatMouse()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="testEatMouse" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEatMouse -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="testNextPoint" data-provider="generator" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=9, x=5)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="testNextPoint" data-provider="generator" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=10, x=5)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="testNextPoint" data-provider="generator" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=8, x=1)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="testNextPoint" data-provider="generator" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=1, x=3)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="testNextPoint" data-provider="generator" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=3, x=9)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="testNextPoint" data-provider="generator" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=12, x=5)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="testNextPoint" data-provider="generator" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=4, x=3)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="testNextPoint" data-provider="generator" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=17, x=1)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="testNextPoint" data-provider="generator" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=18, x=7)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="testNextPoint" data-provider="generator" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=8, x=2)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="testNextPoint" data-provider="generator" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=10, x=7)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="testNextPoint" data-provider="generator" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=11, x=3)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="testNextPoint" data-provider="generator" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=10, x=8)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="testNextPoint" data-provider="generator" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=16, x=2)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="testNextPoint" data-provider="generator" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=3, x=1)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="testNextPoint" data-provider="generator" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=6, x=6)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="testNextPoint" data-provider="generator" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=18, x=6)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="testNextPoint" data-provider="generator" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=6, x=3)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testStream()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="testStream" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStream -->
        <test-method signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="testNextPoint" data-provider="generator" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=2), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=2, x=9)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNextPoint(java.util.List, com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MouseTest@37d31475]" started-at="2024-03-21T11:39:31Z" name="testNextPoint" data-provider="generator" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[Point(y=0, x=0), Point(y=0, x=1), Point(y=0, x=2), Point(y=0, x=3), Point(y=0, x=4), Point(y=0, x=5), Point(y=0, x=6), Point(y=0, x=7), Point(y=0, x=8), Point(y=0, x=9), Point(y=1, x=0), Point(y=1, x=1), Point(y=1, x=2), Point(y=1, x=3), Point(y=1, x=4), Point(y=1, x=5), Point(y=1, x=6), Point(y=1, x=7), Point(y=1, x=8), Point(y=1, x=9), Point(y=2, x=0), Point(y=2, x=1), Point(y=2, x=2), Point(y=2, x=3), Point(y=2, x=4), Point(y=2, x=5), Point(y=2, x=6), Point(y=2, x=7), Point(y=2, x=8), Point(y=2, x=9), Point(y=3, x=0), Point(y=3, x=1), Point(y=3, x=2), Point(y=3, x=3), Point(y=3, x=4), Point(y=3, x=5), Point(y=3, x=6), Point(y=3, x=7), Point(y=3, x=8), Point(y=3, x=9), Point(y=4, x=0), Point(y=4, x=1), Point(y=4, x=2), Point(y=4, x=3), Point(y=4, x=4), Point(y=4, x=5), Point(y=4, x=6), Point(y=4, x=7), Point(y=4, x=8), Point(y=4, x=9), Point(y=5, x=0), Point(y=5, x=1), Point(y=5, x=2), Point(y=5, x=3), Point(y=5, x=4), Point(y=5, x=5), Point(y=5, x=6), Point(y=5, x=7), Point(y=5, x=8), Point(y=5, x=9), Point(y=6, x=0), Point(y=6, x=1), Point(y=6, x=2), Point(y=6, x=3), Point(y=6, x=4), Point(y=6, x=5), Point(y=6, x=6), Point(y=6, x=7), Point(y=6, x=8), Point(y=6, x=9), Point(y=7, x=0), Point(y=7, x=1), Point(y=7, x=2), Point(y=7, x=3), Point(y=7, x=4), Point(y=7, x=5), Point(y=7, x=6), Point(y=7, x=7), Point(y=7, x=8), Point(y=7, x=9), Point(y=8, x=0), Point(y=8, x=1), Point(y=8, x=2), Point(y=8, x=3), Point(y=8, x=4), Point(y=8, x=5), Point(y=8, x=6), Point(y=8, x=7), Point(y=8, x=8), Point(y=8, x=9), Point(y=9, x=0), Point(y=9, x=1), Point(y=9, x=2), Point(y=9, x=3), Point(y=9, x=4), Point(y=9, x=5), Point(y=9, x=6), Point(y=9, x=7), Point(y=9, x=8), Point(y=9, x=9), Point(y=10, x=0), Point(y=10, x=1), Point(y=10, x=3), Point(y=10, x=4), Point(y=10, x=5), Point(y=10, x=6), Point(y=10, x=7), Point(y=10, x=8), Point(y=10, x=9), Point(y=11, x=0), Point(y=11, x=1), Point(y=11, x=2), Point(y=11, x=3), Point(y=11, x=4), Point(y=11, x=5), Point(y=11, x=6), Point(y=11, x=7), Point(y=11, x=8), Point(y=11, x=9), Point(y=12, x=0), Point(y=12, x=1), Point(y=12, x=2), Point(y=12, x=3), Point(y=12, x=4), Point(y=12, x=5), Point(y=12, x=6), Point(y=12, x=7), Point(y=12, x=8), Point(y=12, x=9), Point(y=13, x=0), Point(y=13, x=1), Point(y=13, x=2), Point(y=13, x=3), Point(y=13, x=4), Point(y=13, x=5), Point(y=13, x=6), Point(y=13, x=7), Point(y=13, x=8), Point(y=13, x=9), Point(y=14, x=0), Point(y=14, x=1), Point(y=14, x=2), Point(y=14, x=3), Point(y=14, x=4), Point(y=14, x=5), Point(y=14, x=6), Point(y=14, x=7), Point(y=14, x=8), Point(y=14, x=9), Point(y=15, x=0), Point(y=15, x=1), Point(y=15, x=2), Point(y=15, x=3), Point(y=15, x=4), Point(y=15, x=5), Point(y=15, x=6), Point(y=15, x=7), Point(y=15, x=8), Point(y=15, x=9), Point(y=16, x=0), Point(y=16, x=1), Point(y=16, x=2), Point(y=16, x=3), Point(y=16, x=4), Point(y=16, x=5), Point(y=16, x=6), Point(y=16, x=7), Point(y=16, x=8), Point(y=16, x=9), Point(y=17, x=0), Point(y=17, x=1), Point(y=17, x=2), Point(y=17, x=3), Point(y=17, x=4), Point(y=17, x=5), Point(y=17, x=6), Point(y=17, x=7), Point(y=17, x=8), Point(y=17, x=9), Point(y=18, x=0), Point(y=18, x=1), Point(y=18, x=2), Point(y=18, x=3), Point(y=18, x=4), Point(y=18, x=5), Point(y=18, x=6), Point(y=18, x=7), Point(y=18, x=8), Point(y=18, x=9), Point(y=19, x=0), Point(y=19, x=1), Point(y=19, x=2), Point(y=19, x=3), Point(y=19, x=4), Point(y=19, x=5), Point(y=19, x=6), Point(y=19, x=7), Point(y=19, x=8), Point(y=19, x=9)]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Point(y=10, x=2)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNextPoint -->
      </class> <!-- com.github.vitalibo.brickgame.game.snake.MouseTest -->
      <class name="com.github.vitalibo.brickgame.core.JobTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.JobTest@27808f31]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="50" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testKill()[pri:0, instance:com.github.vitalibo.brickgame.core.JobTest@27808f31]" started-at="2024-03-21T11:39:31Z" name="testKill" finished-at="2024-03-21T11:39:31Z" duration-ms="51" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testKill -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.JobTest@27808f31]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="50" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPause()[pri:0, instance:com.github.vitalibo.brickgame.core.JobTest@27808f31]" started-at="2024-03-21T11:39:31Z" name="testPause" finished-at="2024-03-21T11:39:31Z" duration-ms="101" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPause -->
      </class> <!-- com.github.vitalibo.brickgame.core.JobTest -->
      <class name="com.github.vitalibo.brickgame.game.race.CarTest">
        <test-method signature="testCarCrashed()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@2c039ac6]" started-at="2024-03-21T11:39:29Z" name="testCarCrashed" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[car crashed]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: car crashed, point=Point(y=4, x=5))
	at com.github.vitalibo.brickgame.game.race.Car.verifyCrash(Car.java:68)
	at com.github.vitalibo.brickgame.game.race.CarTest.testCarCrashed(CarTest.java:59)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCarCrashed -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@2c039ac6]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDown()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@2c039ac6]" started-at="2024-03-21T11:39:29Z" name="testDown" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@2c039ac6]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@2c039ac6]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLeft()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@2c039ac6]" started-at="2024-03-21T11:39:29Z" name="testLeft" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLeft -->
        <test-method signature="testRight()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@2c039ac6]" started-at="2024-03-21T11:39:29Z" name="testRight" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRight -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@2c039ac6]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testVerifyPassed()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@2c039ac6]" started-at="2024-03-21T11:39:29Z" name="testVerifyPassed" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyPassed -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.race.CarTest@2c039ac6]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
      </class> <!-- com.github.vitalibo.brickgame.game.race.CarTest -->
      <class name="com.github.vitalibo.brickgame.core.ui.BrickPanelTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:28Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="255" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testBrickSize()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testBrickSize" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBrickSize -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
        <test-method signature="testDraw(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.BrickPanelTest@58c1670b]" started-at="2024-03-21T11:39:29Z" name="testDraw" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDraw -->
      </class> <!-- com.github.vitalibo.brickgame.core.ui.BrickPanelTest -->
      <class name="com.github.vitalibo.brickgame.core.ui.IconPanelTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.IconPanelTest@45820e51]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNotRepaint(boolean)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.IconPanelTest@45820e51]" started-at="2024-03-21T11:39:31Z" name="testNotRepaint" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotRepaint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.IconPanelTest@45820e51]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.IconPanelTest@45820e51]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNotRepaint(boolean)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.IconPanelTest@45820e51]" started-at="2024-03-21T11:39:31Z" name="testNotRepaint" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotRepaint -->
        <test-method signature="testRepaint(boolean)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.IconPanelTest@45820e51]" started-at="2024-03-21T11:39:31Z" name="testRepaint" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.IconPanelTest@45820e51]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testRepaint(boolean)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.IconPanelTest@45820e51]" started-at="2024-03-21T11:39:31Z" name="testRepaint" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
      </class> <!-- com.github.vitalibo.brickgame.core.ui.IconPanelTest -->
      <class name="com.github.vitalibo.brickgame.game.tetris.BoardTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@1a1d6a08]" started-at="2024-03-21T11:39:28Z" name="setUp" finished-at="2024-03-21T11:39:28Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testAdd()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@1a1d6a08]" started-at="2024-03-21T11:39:28Z" name="testAdd" finished-at="2024-03-21T11:39:28Z" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAdd -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@1a1d6a08]" started-at="2024-03-21T11:39:28Z" name="setUp" finished-at="2024-03-21T11:39:28Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testCleanUp()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@1a1d6a08]" started-at="2024-03-21T11:39:28Z" name="testCleanUp" finished-at="2024-03-21T11:39:28Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCleanUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@1a1d6a08]" started-at="2024-03-21T11:39:28Z" name="setUp" finished-at="2024-03-21T11:39:28Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInit(int)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@1a1d6a08]" started-at="2024-03-21T11:39:28Z" name="testInit" data-provider="levels" finished-at="2024-03-21T11:39:28Z" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInit -->
        <test-method signature="testInit(int)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@1a1d6a08]" started-at="2024-03-21T11:39:28Z" name="testInit" data-provider="levels" finished-at="2024-03-21T11:39:28Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInit -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@1a1d6a08]" started-at="2024-03-21T11:39:28Z" name="setUp" finished-at="2024-03-21T11:39:28Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@1a1d6a08]" started-at="2024-03-21T11:39:28Z" name="setUp" finished-at="2024-03-21T11:39:28Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@1a1d6a08]" started-at="2024-03-21T11:39:28Z" name="setUp" finished-at="2024-03-21T11:39:28Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInit(int)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@1a1d6a08]" started-at="2024-03-21T11:39:28Z" name="testInit" data-provider="levels" finished-at="2024-03-21T11:39:28Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInit -->
        <test-method signature="testInit(int)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@1a1d6a08]" started-at="2024-03-21T11:39:28Z" name="testInit" data-provider="levels" finished-at="2024-03-21T11:39:28Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[15]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInit -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@1a1d6a08]" started-at="2024-03-21T11:39:28Z" name="setUp" finished-at="2024-03-21T11:39:28Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testIsFull()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@1a1d6a08]" started-at="2024-03-21T11:39:28Z" name="testIsFull" finished-at="2024-03-21T11:39:28Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsFull -->
        <test-method signature="testVerify()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@1a1d6a08]" started-at="2024-03-21T11:39:28Z" name="testVerify" finished-at="2024-03-21T11:39:28Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerify -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.BoardTest@1a1d6a08]" started-at="2024-03-21T11:39:28Z" name="setUp" finished-at="2024-03-21T11:39:28Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
      </class> <!-- com.github.vitalibo.brickgame.game.tetris.BoardTest -->
      <class name="com.github.vitalibo.brickgame.util.CanvasTranslatorTest">
        <test-method signature="testFrom()[pri:0, instance:com.github.vitalibo.brickgame.util.CanvasTranslatorTest@7113b13f]" started-at="2024-03-21T11:39:29Z" name="testFrom" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFrom -->
        <test-method signature="testFromStream(int, int)[pri:0, instance:com.github.vitalibo.brickgame.util.CanvasTranslatorTest@7113b13f]" started-at="2024-03-21T11:39:29Z" name="testFromStream" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFromStream -->
        <test-method signature="testFromStream(int, int)[pri:0, instance:com.github.vitalibo.brickgame.util.CanvasTranslatorTest@7113b13f]" started-at="2024-03-21T11:39:29Z" name="testFromStream" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFromStream -->
        <test-method signature="testFromStream(int, int)[pri:0, instance:com.github.vitalibo.brickgame.util.CanvasTranslatorTest@7113b13f]" started-at="2024-03-21T11:39:29Z" name="testFromStream" data-provider="samples" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[19]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFromStream -->
      </class> <!-- com.github.vitalibo.brickgame.util.CanvasTranslatorTest -->
      <class name="com.github.vitalibo.brickgame.game.snake.DirectionTest">
        <test-method signature="testReverse(com.github.vitalibo.brickgame.game.snake.Direction, com.github.vitalibo.brickgame.game.snake.Direction)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.DirectionTest@42d8062c]" started-at="2024-03-21T11:39:31Z" name="testReverse" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[UP]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[DOWN]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReverse -->
        <test-method signature="testReverse(com.github.vitalibo.brickgame.game.snake.Direction, com.github.vitalibo.brickgame.game.snake.Direction)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.DirectionTest@42d8062c]" started-at="2024-03-21T11:39:31Z" name="testReverse" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[DOWN]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[UP]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReverse -->
        <test-method signature="testReverse(com.github.vitalibo.brickgame.game.snake.Direction, com.github.vitalibo.brickgame.game.snake.Direction)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.DirectionTest@42d8062c]" started-at="2024-03-21T11:39:31Z" name="testReverse" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[NOT_DEFINED]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[NOT_DEFINED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReverse -->
        <test-method signature="testReverse(com.github.vitalibo.brickgame.game.snake.Direction, com.github.vitalibo.brickgame.game.snake.Direction)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.DirectionTest@42d8062c]" started-at="2024-03-21T11:39:31Z" name="testReverse" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[RIGHT]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[LEFT]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReverse -->
        <test-method signature="testReverse(com.github.vitalibo.brickgame.game.snake.Direction, com.github.vitalibo.brickgame.game.snake.Direction)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.DirectionTest@42d8062c]" started-at="2024-03-21T11:39:31Z" name="testReverse" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[LEFT]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[RIGHT]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReverse -->
      </class> <!-- com.github.vitalibo.brickgame.game.snake.DirectionTest -->
      <class name="com.github.vitalibo.brickgame.game.snake.MapTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testCrashOnBorder(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="testCrashOnBorder" data-provider="samplesCrashed" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[snake crash init map border]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: snake crash init map border, point=Point(y=0, x=0))
	at com.github.vitalibo.brickgame.game.snake.Map.verifyCrashOnBorder(Map.java:26)
	at com.github.vitalibo.brickgame.game.snake.MapTest.testCrashOnBorder(MapTest.java:63)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCrashOnBorder -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testCrashOnBorder(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="testCrashOnBorder" data-provider="samplesCrashed" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[snake crash init map border]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: snake crash init map border, point=Point(y=1, x=1))
	at com.github.vitalibo.brickgame.game.snake.Map.verifyCrashOnBorder(Map.java:26)
	at com.github.vitalibo.brickgame.game.snake.MapTest.testCrashOnBorder(MapTest.java:63)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCrashOnBorder -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testCrashOnBorder(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="testCrashOnBorder" data-provider="samplesCrashed" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[snake crash init map border]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: snake crash init map border, point=Point(y=0, x=2))
	at com.github.vitalibo.brickgame.game.snake.Map.verifyCrashOnBorder(Map.java:26)
	at com.github.vitalibo.brickgame.game.snake.MapTest.testCrashOnBorder(MapTest.java:63)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCrashOnBorder -->
        <test-method signature="testCrashOnBorder(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="testCrashOnBorder" data-provider="samplesCrashed" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[snake crash init map border]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: snake crash init map border, point=Point(y=2, x=0))
	at com.github.vitalibo.brickgame.game.snake.Map.verifyCrashOnBorder(Map.java:26)
	at com.github.vitalibo.brickgame.game.snake.MapTest.testCrashOnBorder(MapTest.java:63)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCrashOnBorder -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="testLoadingMap" data-provider="levels" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="testLoadingMap" data-provider="levels" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="testLoadingMap" data-provider="levels" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="testLoadingMap" data-provider="levels" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="testLoadingMap" data-provider="levels" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="testLoadingMap" data-provider="levels" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="testLoadingMap" data-provider="levels" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="testLoadingMap" data-provider="levels" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="testLoadingMap" data-provider="levels" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="testLoadingMap" data-provider="levels" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="testLoadingMap" data-provider="levels" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="testLoadingMap" data-provider="levels" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[12]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="testLoadingMap" data-provider="levels" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="testLoadingMap" data-provider="levels" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[13]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="testLoadingMap" data-provider="levels" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[14]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testLoadingMap(int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="testLoadingMap" data-provider="levels" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[15]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLoadingMap -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testUnmodifiableList()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="testUnmodifiableList" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <exception class="java.lang.UnsupportedOperationException">
            <full-stacktrace>
              <![CDATA[java.lang.UnsupportedOperationException
	at java.base/java.util.Collections$UnmodifiableCollection.add(Collections.java:1060)
	at com.github.vitalibo.brickgame.game.snake.Map.add(Map.java:18)
	at com.github.vitalibo.brickgame.game.snake.MapTest.testUnmodifiableList(MapTest.java:37)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.UnsupportedOperationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUnmodifiableList -->
        <test-method signature="testVerifyPassed(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="testVerifyPassed" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyPassed -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testVerifyPassed(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="testVerifyPassed" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyPassed -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testVerifyPassed(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="testVerifyPassed" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyPassed -->
        <test-method signature="testVerifyPassed(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.MapTest@23d2a7e8]" started-at="2024-03-21T11:39:31Z" name="testVerifyPassed" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyPassed -->
      </class> <!-- com.github.vitalibo.brickgame.game.snake.MapTest -->
      <class name="com.github.vitalibo.brickgame.core.ui.NumberPanelTest">
        <test-method signature="testDigitSequence(int, int, java.util.List)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.NumberPanelTest@587d1d39]" started-at="2024-03-21T11:39:31Z" name="testDigitSequence" data-provider="samplesDigitSequence" finished-at="2024-03-21T11:39:31Z" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDigitSequence -->
        <test-method signature="testDigitSequence(int, int, java.util.List)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.NumberPanelTest@587d1d39]" started-at="2024-03-21T11:39:31Z" name="testDigitSequence" data-provider="samplesDigitSequence" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDigitSequence -->
        <test-method signature="testOverflowValue(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.NumberPanelTest@587d1d39]" started-at="2024-03-21T11:39:31Z" name="testOverflowValue" data-provider="samplesMaxValue" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOverflowValue -->
        <test-method signature="testOverflowValue(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.NumberPanelTest@587d1d39]" started-at="2024-03-21T11:39:31Z" name="testOverflowValue" data-provider="samplesMaxValue" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[99]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOverflowValue -->
        <test-method signature="testDigitSequence(int, int, java.util.List)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.NumberPanelTest@587d1d39]" started-at="2024-03-21T11:39:31Z" name="testDigitSequence" data-provider="samplesDigitSequence" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1234567890]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDigitSequence -->
        <test-method signature="testOverflowValue(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.NumberPanelTest@587d1d39]" started-at="2024-03-21T11:39:31Z" name="testOverflowValue" data-provider="samplesMaxValue" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOverflowValue -->
        <test-method signature="testOverflowValue(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.NumberPanelTest@587d1d39]" started-at="2024-03-21T11:39:31Z" name="testOverflowValue" data-provider="samplesMaxValue" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[999]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOverflowValue -->
        <test-method signature="testSetIllegalValue()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.NumberPanelTest@587d1d39]" started-at="2024-03-21T11:39:31Z" name="testSetIllegalValue" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The value must be mere 0.]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The value must be mere 0.
	at com.github.vitalibo.brickgame.core.ui.NumberPanel.set(NumberPanel.java:49)
	at com.github.vitalibo.brickgame.core.ui.NumberPanelTest.testSetIllegalValue(NumberPanelTest.java:42)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSetIllegalValue -->
      </class> <!-- com.github.vitalibo.brickgame.core.ui.NumberPanelTest -->
      <class name="com.github.vitalibo.brickgame.game.PointTest">
        <test-method signature="testMoveDown(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@6b9651f3]" started-at="2024-03-21T11:39:31Z" name="testMoveDown" data-provider="samplesMoveVertical" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMoveDown -->
        <test-method signature="testMoveDown(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@6b9651f3]" started-at="2024-03-21T11:39:31Z" name="testMoveDown" data-provider="samplesMoveVertical" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[19]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[18]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMoveDown -->
        <test-method signature="testMoveLeft(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@6b9651f3]" started-at="2024-03-21T11:39:31Z" name="testMoveLeft" data-provider="samplesMoveHorizontal" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMoveLeft -->
        <test-method signature="testVerifyFailed(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@6b9651f3]" started-at="2024-03-21T11:39:31Z" name="testVerifyFailed" data-provider="samplesOutOfBounds" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[The Y value must be in the range 0 - 19.]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: The Y value must be in the range 0 - 19., point=Point(y=-1, x=0))
	at com.github.vitalibo.brickgame.game.Point.verify(Point.java:58)
	at com.github.vitalibo.brickgame.game.PointTest.testVerifyFailed(PointTest.java:37)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyFailed -->
        <test-method signature="testMoveLeft(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@6b9651f3]" started-at="2024-03-21T11:39:31Z" name="testMoveLeft" data-provider="samplesMoveHorizontal" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMoveLeft -->
        <test-method signature="testVerifyFailed(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@6b9651f3]" started-at="2024-03-21T11:39:31Z" name="testVerifyFailed" data-provider="samplesOutOfBounds" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[20]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[The Y value must be in the range 0 - 19.]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: The Y value must be in the range 0 - 19., point=Point(y=20, x=0))
	at com.github.vitalibo.brickgame.game.Point.verify(Point.java:58)
	at com.github.vitalibo.brickgame.game.PointTest.testVerifyFailed(PointTest.java:37)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyFailed -->
        <test-method signature="testMoveUp(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@6b9651f3]" started-at="2024-03-21T11:39:31Z" name="testMoveUp" data-provider="samplesMoveVertical" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[19]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[18]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMoveUp -->
        <test-method signature="testMoveRight(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@6b9651f3]" started-at="2024-03-21T11:39:31Z" name="testMoveRight" data-provider="samplesMoveHorizontal" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMoveRight -->
        <test-method signature="testMoveRight(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@6b9651f3]" started-at="2024-03-21T11:39:31Z" name="testMoveRight" data-provider="samplesMoveHorizontal" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMoveRight -->
        <test-method signature="testMoveUp(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@6b9651f3]" started-at="2024-03-21T11:39:31Z" name="testMoveUp" data-provider="samplesMoveVertical" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMoveUp -->
        <test-method signature="testVerifyFailed(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@6b9651f3]" started-at="2024-03-21T11:39:31Z" name="testVerifyFailed" data-provider="samplesOutOfBounds" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[The X value must be in the range 0 - 9.]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: The X value must be in the range 0 - 9., point=Point(y=0, x=-1))
	at com.github.vitalibo.brickgame.game.Point.verify(Point.java:54)
	at com.github.vitalibo.brickgame.game.PointTest.testVerifyFailed(PointTest.java:37)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyFailed -->
        <test-method signature="testVerifyFailed(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@6b9651f3]" started-at="2024-03-21T11:39:31Z" name="testVerifyFailed" data-provider="samplesOutOfBounds" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[The X value must be in the range 0 - 9.]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: The X value must be in the range 0 - 9., point=Point(y=0, x=10))
	at com.github.vitalibo.brickgame.game.Point.verify(Point.java:54)
	at com.github.vitalibo.brickgame.game.PointTest.testVerifyFailed(PointTest.java:37)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyFailed -->
        <test-method signature="testVerifyPassed(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@6b9651f3]" started-at="2024-03-21T11:39:31Z" name="testVerifyPassed" data-provider="samplesInBounds" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[19]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyPassed -->
        <test-method signature="testVerifyPassed(int, int)[pri:0, instance:com.github.vitalibo.brickgame.game.PointTest@6b9651f3]" started-at="2024-03-21T11:39:31Z" name="testVerifyPassed" data-provider="samplesInBounds" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyPassed -->
      </class> <!-- com.github.vitalibo.brickgame.game.PointTest -->
      <class name="com.github.vitalibo.brickgame.game.ShapeTest">
        <test-method signature="testShapeEquals(com.github.vitalibo.brickgame.game.Shape, com.github.vitalibo.brickgame.game.Shape)[pri:0, instance:com.github.vitalibo.brickgame.game.ShapeTest@4abdb505]" started-at="2024-03-21T11:39:31Z" name="testShapeEquals" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.Shape@43ca96a0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.Shape@7c68a63c]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testShapeEquals -->
        <test-method signature="testShapeEquals(com.github.vitalibo.brickgame.game.Shape, com.github.vitalibo.brickgame.game.Shape)[pri:0, instance:com.github.vitalibo.brickgame.game.ShapeTest@4abdb505]" started-at="2024-03-21T11:39:31Z" name="testShapeEquals" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.Shape@2b506a79]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.Shape@48b9773b]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testShapeEquals -->
      </class> <!-- com.github.vitalibo.brickgame.game.ShapeTest -->
      <class name="com.github.vitalibo.brickgame.game.race.RoadTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.race.RoadTest@3e57cd70]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDown()[pri:0, instance:com.github.vitalibo.brickgame.game.race.RoadTest@3e57cd70]" started-at="2024-03-21T11:39:31Z" name="testDown" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDown -->
      </class> <!-- com.github.vitalibo.brickgame.game.race.RoadTest -->
      <class name="com.github.vitalibo.brickgame.util.BooleanCollectorTest">
        <test-method signature="testToArray()[pri:0, instance:com.github.vitalibo.brickgame.util.BooleanCollectorTest@60285225]" started-at="2024-03-21T11:39:28Z" name="testToArray" finished-at="2024-03-21T11:39:28Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testToArray -->
        <test-method signature="testToTwoDimensionalArray()[pri:0, instance:com.github.vitalibo.brickgame.util.BooleanCollectorTest@60285225]" started-at="2024-03-21T11:39:28Z" name="testToTwoDimensionalArray" finished-at="2024-03-21T11:39:28Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testToTwoDimensionalArray -->
      </class> <!-- com.github.vitalibo.brickgame.util.BooleanCollectorTest -->
      <class name="com.github.vitalibo.brickgame.game.LifeTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@7ce6a65d]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="cleanUp()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@7ce6a65d]" started-at="2024-03-21T11:39:31Z" name="cleanUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@7ce6a65d]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="reset()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@7ce6a65d]" started-at="2024-03-21T11:39:31Z" name="reset" finished-at="2024-03-21T11:39:31Z" depends-on-methods="com.github.vitalibo.brickgame.game.LifeTest.setUp" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reset -->
        <test-method signature="testNotRepaint()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@7ce6a65d]" started-at="2024-03-21T11:39:31Z" name="testNotRepaint" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotRepaint -->
        <test-method is-config="true" signature="reset()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@7ce6a65d]" started-at="2024-03-21T11:39:31Z" name="reset" finished-at="2024-03-21T11:39:31Z" depends-on-methods="com.github.vitalibo.brickgame.game.LifeTest.setUp" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reset -->
        <test-method signature="testRepaint(int, [[Z)[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@7ce6a65d]" started-at="2024-03-21T11:39:31Z" name="testRepaint" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[Z@3987a1e8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method is-config="true" signature="reset()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@7ce6a65d]" started-at="2024-03-21T11:39:31Z" name="reset" finished-at="2024-03-21T11:39:31Z" depends-on-methods="com.github.vitalibo.brickgame.game.LifeTest.setUp" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reset -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@7ce6a65d]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testRepaint(int, [[Z)[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@7ce6a65d]" started-at="2024-03-21T11:39:31Z" name="testRepaint" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[Z@20d65767]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method signature="testRepaint(int, [[Z)[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@7ce6a65d]" started-at="2024-03-21T11:39:31Z" name="testRepaint" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[Z@250e8712]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method is-config="true" signature="reset()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@7ce6a65d]" started-at="2024-03-21T11:39:31Z" name="reset" finished-at="2024-03-21T11:39:31Z" depends-on-methods="com.github.vitalibo.brickgame.game.LifeTest.setUp" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reset -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@7ce6a65d]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@7ce6a65d]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@7ce6a65d]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="reset()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@7ce6a65d]" started-at="2024-03-21T11:39:31Z" name="reset" finished-at="2024-03-21T11:39:31Z" depends-on-methods="com.github.vitalibo.brickgame.game.LifeTest.setUp" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reset -->
        <test-method is-config="true" signature="reset()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@7ce6a65d]" started-at="2024-03-21T11:39:31Z" name="reset" finished-at="2024-03-21T11:39:31Z" depends-on-methods="com.github.vitalibo.brickgame.game.LifeTest.setUp" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reset -->
        <test-method is-config="true" signature="reset()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@7ce6a65d]" started-at="2024-03-21T11:39:31Z" name="reset" finished-at="2024-03-21T11:39:31Z" depends-on-methods="com.github.vitalibo.brickgame.game.LifeTest.setUp" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reset -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@7ce6a65d]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testRepaint(int, [[Z)[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@7ce6a65d]" started-at="2024-03-21T11:39:31Z" name="testRepaint" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[16]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[Z@f60c14e]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method signature="testRepaint(int, [[Z)[pri:0, instance:com.github.vitalibo.brickgame.game.LifeTest@7ce6a65d]" started-at="2024-03-21T11:39:31Z" name="testRepaint" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[[Z@becb93a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
      </class> <!-- com.github.vitalibo.brickgame.game.LifeTest -->
      <class name="com.github.vitalibo.brickgame.game.snake.SnakeTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@32d2fa64]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testEatSelf(com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@32d2fa64]" started-at="2024-03-21T11:39:31Z" name="testEatSelf" data-provider="samplesCrashed" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Point(y=0, x=0)]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[snake ate itself]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: snake ate itself, point=Point(y=0, x=0))
	at com.github.vitalibo.brickgame.game.snake.Snake.lambda$verifyEatSelf$0(Snake.java:33)
	at java.base/java.util.Optional.ifPresent(Optional.java:183)
	at com.github.vitalibo.brickgame.game.snake.Snake.verifyEatSelf(Snake.java:32)
	at com.github.vitalibo.brickgame.game.snake.SnakeTest.testEatSelf(SnakeTest.java:68)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEatSelf -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@32d2fa64]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testHead()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@32d2fa64]" started-at="2024-03-21T11:39:31Z" name="testHead" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHead -->
        <test-method signature="testEatSelf(com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@32d2fa64]" started-at="2024-03-21T11:39:31Z" name="testEatSelf" data-provider="samplesCrashed" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Point(y=0, x=1)]]>
              </value>
            </param>
          </params>
          <exception class="com.github.vitalibo.brickgame.core.GameException">
            <message>
              <![CDATA[snake ate itself]]>
            </message>
            <full-stacktrace>
              <![CDATA[GameException(super=com.github.vitalibo.brickgame.core.GameException: snake ate itself, point=Point(y=0, x=1))
	at com.github.vitalibo.brickgame.game.snake.Snake.lambda$verifyEatSelf$0(Snake.java:33)
	at java.base/java.util.Optional.ifPresent(Optional.java:183)
	at com.github.vitalibo.brickgame.game.snake.Snake.verifyEatSelf(Snake.java:32)
	at com.github.vitalibo.brickgame.game.snake.SnakeTest.testEatSelf(SnakeTest.java:68)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- com.github.vitalibo.brickgame.core.GameException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEatSelf -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@32d2fa64]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInit()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@32d2fa64]" started-at="2024-03-21T11:39:31Z" name="testInit" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInit -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@32d2fa64]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testVerifyPassed(com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@32d2fa64]" started-at="2024-03-21T11:39:31Z" name="testVerifyPassed" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Point(y=5, x=5)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyPassed -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@32d2fa64]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@32d2fa64]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testVerifyPassed(com.github.vitalibo.brickgame.game.Point)[pri:0, instance:com.github.vitalibo.brickgame.game.snake.SnakeTest@32d2fa64]" started-at="2024-03-21T11:39:31Z" name="testVerifyPassed" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Point(y=0, x=2)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVerifyPassed -->
      </class> <!-- com.github.vitalibo.brickgame.game.snake.SnakeTest -->
      <class name="com.github.vitalibo.brickgame.util.BuilderTest">
        <test-method signature="testMap()[pri:0, instance:com.github.vitalibo.brickgame.util.BuilderTest@38bc8ab5]" started-at="2024-03-21T11:39:29Z" name="testMap" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMap -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.util.BuilderTest@38bc8ab5]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testWith()[pri:0, instance:com.github.vitalibo.brickgame.util.BuilderTest@38bc8ab5]" started-at="2024-03-21T11:39:29Z" name="testWith" finished-at="2024-03-21T11:39:29Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWith -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.util.BuilderTest@38bc8ab5]" started-at="2024-03-21T11:39:29Z" name="setUp" finished-at="2024-03-21T11:39:29Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
      </class> <!-- com.github.vitalibo.brickgame.util.BuilderTest -->
      <class name="com.github.vitalibo.brickgame.core.StateTest">
        <test-method signature="testChangeState(boolean)[pri:0, instance:com.github.vitalibo.brickgame.core.StateTest@6b57696f]" started-at="2024-03-21T11:39:31Z" name="testChangeState" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testChangeState -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.StateTest@6b57696f]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.StateTest@6b57696f]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testChangeState(boolean)[pri:0, instance:com.github.vitalibo.brickgame.core.StateTest@6b57696f]" started-at="2024-03-21T11:39:31Z" name="testChangeState" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testChangeState -->
      </class> <!-- com.github.vitalibo.brickgame.core.StateTest -->
      <class name="com.github.vitalibo.brickgame.core.NumberTest">
        <test-method signature="testDec(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@9a7504c]" started-at="2024-03-21T11:39:31Z" name="testDec" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDec -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@9a7504c]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDecStep(int, int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@9a7504c]" started-at="2024-03-21T11:39:31Z" name="testDecStep" data-provider="samplesWithStep" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDecStep -->
        <test-method signature="testDec(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@9a7504c]" started-at="2024-03-21T11:39:31Z" name="testDec" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[101]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDec -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@9a7504c]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDecStep(int, int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@9a7504c]" started-at="2024-03-21T11:39:31Z" name="testDecStep" data-provider="samplesWithStep" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[12445]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDecStep -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@9a7504c]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDec(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@9a7504c]" started-at="2024-03-21T11:39:31Z" name="testDec" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12346]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDec -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@9a7504c]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@9a7504c]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@9a7504c]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInc(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@9a7504c]" started-at="2024-03-21T11:39:31Z" name="testInc" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInc -->
        <test-method signature="testDecStep(int, int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@9a7504c]" started-at="2024-03-21T11:39:31Z" name="testDecStep" data-provider="samplesWithStep" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[54321]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[66666]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDecStep -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@9a7504c]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testDecStep(int, int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@9a7504c]" started-at="2024-03-21T11:39:31Z" name="testDecStep" data-provider="samplesWithStep" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[24690]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDecStep -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@9a7504c]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInc(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@9a7504c]" started-at="2024-03-21T11:39:31Z" name="testInc" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12346]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInc -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@9a7504c]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@9a7504c]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testIncStep(int, int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@9a7504c]" started-at="2024-03-21T11:39:31Z" name="testIncStep" data-provider="samplesWithStep" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIncStep -->
        <test-method signature="testIncStep(int, int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@9a7504c]" started-at="2024-03-21T11:39:31Z" name="testIncStep" data-provider="samplesWithStep" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[54321]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[66666]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIncStep -->
        <test-method signature="testIncStep(int, int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@9a7504c]" started-at="2024-03-21T11:39:31Z" name="testIncStep" data-provider="samplesWithStep" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[12445]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIncStep -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@9a7504c]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testInc(int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@9a7504c]" started-at="2024-03-21T11:39:31Z" name="testInc" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[100]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[101]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInc -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@9a7504c]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testIncStep(int, int, int)[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@9a7504c]" started-at="2024-03-21T11:39:31Z" name="testIncStep" data-provider="samplesWithStep" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[24690]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIncStep -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@9a7504c]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.NumberTest@9a7504c]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
      </class> <!-- com.github.vitalibo.brickgame.core.NumberTest -->
      <class name="com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest">
        <test-method signature="testCreate(java.util.function.Function, java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@7a9273a8]" started-at="2024-03-21T11:39:31Z" name="testCreate" data-provider="functions" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda$272/0x000000084031b440@39b95a80]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.J]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreate -->
        <test-method signature="testCreate(java.util.function.Function, java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@7a9273a8]" started-at="2024-03-21T11:39:31Z" name="testCreate" data-provider="functions" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda$271/0x000000084031b040@4b9ed99d]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.I]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreate -->
        <test-method signature="testCreate(java.util.function.Function, java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@7a9273a8]" started-at="2024-03-21T11:39:31Z" name="testCreate" data-provider="functions" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda$274/0x0000000840368440@402c9a60]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.O]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreate -->
        <test-method signature="testCreate(java.util.function.Function, java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@7a9273a8]" started-at="2024-03-21T11:39:31Z" name="testCreate" data-provider="functions" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda$275/0x0000000840368840@7d43f1c9]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.S]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreate -->
        <test-method signature="testCreate(java.util.function.Function, java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@7a9273a8]" started-at="2024-03-21T11:39:31Z" name="testCreate" data-provider="functions" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda$273/0x0000000840368040@3ec62141]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.L]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreate -->
        <test-method signature="testCreate(java.util.function.Function, java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@7a9273a8]" started-at="2024-03-21T11:39:31Z" name="testCreate" data-provider="functions" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda$276/0x0000000840368c40@eddc9bb]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.T]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreate -->
        <test-method signature="testCreate(java.util.function.Function, java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@7a9273a8]" started-at="2024-03-21T11:39:31Z" name="testCreate" data-provider="functions" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda$277/0x0000000840369040@11e3d08]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.Z]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreate -->
        <test-method signature="testGenerate(java.util.function.Supplier, java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@7a9273a8]" started-at="2024-03-21T11:39:31Z" name="testGenerate" data-provider="suppliers" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda$282/0x000000084036a440@2842ef02]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.S]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerate -->
        <test-method signature="testGenerate(java.util.function.Supplier, java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@7a9273a8]" started-at="2024-03-21T11:39:31Z" name="testGenerate" data-provider="suppliers" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda$279/0x0000000840369840@51e0f2eb]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.J]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerate -->
        <test-method signature="testGenerate(java.util.function.Supplier, java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@7a9273a8]" started-at="2024-03-21T11:39:31Z" name="testGenerate" data-provider="suppliers" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda$283/0x000000084036a840@7e63374b]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.T]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerate -->
        <test-method signature="testGenerate(java.util.function.Supplier, java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@7a9273a8]" started-at="2024-03-21T11:39:31Z" name="testGenerate" data-provider="suppliers" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda$281/0x000000084036a040@31a4db4f]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.O]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerate -->
        <test-method signature="testGenerate(java.util.function.Supplier, java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@7a9273a8]" started-at="2024-03-21T11:39:31Z" name="testGenerate" data-provider="suppliers" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda$284/0x000000084036ac40@aa794a3]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.Z]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerate -->
        <test-method signature="testGenerate(java.util.function.Supplier, java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@7a9273a8]" started-at="2024-03-21T11:39:31Z" name="testGenerate" data-provider="suppliers" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda$280/0x0000000840369c40@7a51dc38]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.L]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerate -->
        <test-method signature="testGenerate(java.util.function.Supplier, java.lang.Class)[pri:0, instance:com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest@7a9273a8]" started-at="2024-03-21T11:39:31Z" name="testGenerate" data-provider="suppliers" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest$$Lambda$278/0x0000000840369440@a926db4]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.github.vitalibo.brickgame.game.tetris.tetromino.I]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerate -->
      </class> <!-- com.github.vitalibo.brickgame.game.tetris.tetromino.FactoryTest -->
      <class name="com.github.vitalibo.brickgame.core.ui.DigitTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="229" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNotRepaint()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="testNotRepaint" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotRepaint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="testPaintDigit" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="65" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="testPaintDigit" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="testPaintDigit" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="testPaintDigit" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="testPaintDigit" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="testPaintDigit" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="testPaintDigit" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="testPaintDigit" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="testPaintDigit" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testPaintDigit(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="testPaintDigit" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPaintDigit -->
        <test-method signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="testRepaint" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="testRepaint" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="testRepaint" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="testRepaint" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="testRepaint" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="testRepaint" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="testRepaint" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[7]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="testRepaint" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="testRepaint" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[8]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testSetIllegalValue(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="testSetIllegalValue" data-provider="samplesIllegalValue" finished-at="2024-03-21T11:39:31Z" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[-1]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The value must be in the range 0 - 9.]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The value must be in the range 0 - 9.
	at com.github.vitalibo.brickgame.core.ui.NumberPanel$Digit.set(NumberPanel.java:83)
	at com.github.vitalibo.brickgame.core.ui.DigitTest.testSetIllegalValue(DigitTest.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSetIllegalValue -->
        <test-method signature="testRepaint(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="testRepaint" data-provider="samples" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepaint -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="setUp" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testSetIllegalValue(int)[pri:0, instance:com.github.vitalibo.brickgame.core.ui.DigitTest@1d8d30f7]" started-at="2024-03-21T11:39:31Z" name="testSetIllegalValue" data-provider="samplesIllegalValue" finished-at="2024-03-21T11:39:31Z" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[10]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The value must be in the range 0 - 9.]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The value must be in the range 0 - 9.
	at com.github.vitalibo.brickgame.core.ui.NumberPanel$Digit.set(NumberPanel.java:83)
	at com.github.vitalibo.brickgame.core.ui.DigitTest.testSetIllegalValue(DigitTest.java:72)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1198)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1123)
	at org.testng.TestNG.run(TestNG.java:1031)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:77)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:159)
	at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:99)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSetIllegalValue -->
      </class> <!-- com.github.vitalibo.brickgame.core.ui.DigitTest -->
    </test> <!-- Command line test -->
  </suite> <!-- Command line suite -->
</testng-results>
